(async ()=>{
let args = require('minimist')(process.argv.slice(2))
for(var arg in args){
	let newArg = arg.replace(/-/ig, ' ')
	if(newArg !== arg){
		args[newArg] = args[arg]
		delete args[arg]
	}
}
let fs = require('fs')
let path = require('path')
let paths = require('paths')(args)
let shell = require('shelljs')
let createAdmin = require('createAdmin')
shell.cd(paths.root)

if(Object.keys(args).length == 1) args.all = true
args.volumes = true

console.log('args ', args)

let scripts = {
	volumes: function(args){
		let ret = `
			${args.nobuild ? '' : 'docker build ./ -t mongodbvolumes -f volumes.Dockerfile ;'}
			docker rm --force mongodbvolumes ;
			docker run -d \
			-v mongodbthings:/things \
			-v mongodbdata:/things/data \
			--name mongodbvolumes mongodbvolumes ;
			docker cp ./assets/mongod.conf mongodbvolumes:/things/mongod.conf ;
			docker exec -d mongodbvolumes chown -R 999:999 /things ;
			`
		return ret
	},
	'createConfig': function(args){
		let mongodconf = require('mongod.conf')(args)
		fs.writeFileSync(paths.assets+'mongod.conf', mongodconf)		
	},
	'mongodb': function(args){
		let ret = `
			${args.nobuild ? '' : 'docker build ./ -f mongodb.Dockerfile -t mongodb ;'}
			docker rm --force mongodb ;
			docker run ${args.i ? '-i' : '-d'} \
			--name mongodb \
			--restart=always \
			-v mongodbthings:/things \
			-v mongodbdata:/things/data \
			-p 27017:27017 \
			mongodb \
			--config /things/mongod.conf \
			;
			`
		return ret
	}
}


if(args.createConf || args.createConfig || args.all){
	console.log('running createConfig')
	scripts.createConfig(args)
	
}

if(args.volumes || args.all){
	console.log('running volumes')
	shell.exec(scripts.volumes(args))
}

if(args.mongodb || args.all){
	console.log('running mongodb')
	shell.exec(scripts.mongodb(args))
}

if((args.createAdmin || args.all) && !args.notadmin){
	console.log('running createAdmin')
	await new Promise(resolve => setTimeout(resolve, 2000))
	let success = await createAdmin(args)
	if(success){
		console.log('running createConfig')
		scripts.createConfig({...args, security: true})
	
		console.log('running volumes')
		shell.exec(scripts.volumes(args))
	
		console.log('running mongodb')
		shell.exec(scripts.mongodb(args))
	} else {
		console.log('something went wrong creating an admin')
	}
}

console.log('all done!')
process.exit(1)
// End of file / EOF
})()