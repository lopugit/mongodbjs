let smarts = require('smarts')()
let Uri = require('sentience')['uri.js']
module.exports = async function(args={}){
	let MongoClient = require('mongodb').MongoClient

	smarts.gosmart(args, 'host', 'localhost')
	smarts.gosmart(args, 'port', '27017')
	smarts.gosmart(args, 'db', 'admin')
	smarts.gosmart(args, 'authDb', 'admin')
	smarts.gosmart(args, 'role', 'root')
	smarts.gosmart(args, 'auth', smarts.getsmart(args, 'password', false) ? true : false)
	smarts.gosmart(args, 'username', 'admin')
	smarts.gosmart(args, 'password', 'password')
	smarts.gosmart(args, 'new username', 'test1')
	smarts.gosmart(args, 'new password', 'test1')
	smarts.gosmart(args, 'authMechanism', 'DEFAULT')

	// mdb: {
	// 	ip: "localhost",
	// 	port: 27017,
	// 	dbName: "admin",
	// 	username: "thing",
	// 	password: "thing",
	// 	authDB: "admin",
	// 	auth: true,
	// },

	let uriArgs = {
		ip: args['host'],
		port: args['port'],
		dbName: args['db'],
		username: args['username'],
		password: args['password'],
		authDB: args['authDb'],
		auth: args['auth'],
		authMechanism: args['authMechanism'],
	}
	let uri = Uri(uriArgs)
	let connection = await MongoClient.connect(uri, { useNewUrlParser: true }).catch(err=>console.error(err))
	if(connection){
		console.log(`connected to ${uri} with auth ${uriArgs['auth']} successfully`)
		delete uriArgs['password']
		console.log('uriArgs', uriArgs)
		var adminDb = connection.db('admin')
		let res = await adminDb.addUser(
			args['new username'], 
			args['new password'],
			{
				roles: [
					{
						role: args['role'],
						db: args['db'],
					}
				]
			}
		).catch(err=>console.error(err))
		if(res){
			console.log(`user ${args['new username']} successfully added`)
			return true
		} else {
			console.log(`adding user ${args['new username']} was unsuccessful`)
		}
	} else if(!args['auth']){
		console.log(`connecting to ${uri} with auth ${uriArgs['auth']} failed`)
		delete uriArgs['password']
		console.log('uriArgs', uriArgs)
		uriArgs = {
			ip: args['host'],
			port: args['port'],
			dbName: args['db'],
			username: args['username'],
			password: args['password'],
			authDB: args['authDb'],
			auth: true,
			authMechanism: args['authMechanism'],
		}
		uri = Uri(uriArgs)
		connection = await MongoClient.connect(uri, { useNewUrlParser: true }).catch(err=>console.error(err))
		if(connection){
			console.log(`connected to ${uri} with auth ${uriArgs['auth']} successfully`)
			delete uriArgs['password']
			console.log('uriArgs', uriArgs)
			var adminDb = connection.db('admin')
			let res = await adminDb.addUser(
				args['new username'], 
				args['new password'],
				{
					roles: [
						{
							role: args['role'],
							db: args['db'],
						}
					]
				}
			).catch(err=>console.error(err))
			if(res){
				console.log(`user ${args['new username']} successfully added`)
				return true
			} else {
				console.log(`adding user ${args['new username']} was unsuccessful`)
			}	
		} else {
			console.log(`connecting to ${uri} with auth ${uriArgs['auth']} failed`)
			delete uriArgs['password']
			console.log('uriArgs', uriArgs)
		}
	} else {
		console.log(`connecting to ${uri} with auth ${uriArgs['auth']} failed`)
		delete uriArgs['password']
		console.log('uriArgs', uriArgs)
		uriArgs = {
			ip: args['host'],
			port: args['port'],
			dbName: args['db'],
			username: args['username'],
			password: args['password'],
			authDB: args['authDb'],
			auth: false,
			authMechanism: args['authMechanism'],
		}
		uri = Uri(uriArgs)
		connection = await MongoClient.connect(uri, { useNewUrlParser: true }).catch(err=>console.error(err))
		if(connection){
			console.log(`connected to ${uri} with auth ${uriArgs['auth']} successfully`)
			delete uriArgs['password']
			console.log('uriArgs', uriArgs)
			var adminDb = connection.db('admin')
			let res = await adminDb.addUser(
				args['new username'], 
				args['new password'],
				{
					roles: [
						{
							role: args['role'],
							db: args['db'],
						}
					]
				}
			).catch(err=>console.error(err))
			if(res){
				console.log(`user ${args['new username']} successfully added`)
				return true
			} else {
				console.log(`adding user ${args['new username']} was unsuccessful`)
			}	
		} else {
			console.log(`connecting to ${uri} with auth ${uriArgs['auth']} failed`)
			delete uriArgs['password']
			console.log('uriArgs', uriArgs)
		}
	}
	return false
}